[{"/Users/Jack/Projects/spotibot/src/index.js":"1","/Users/Jack/Projects/spotibot/src/hooks/GroupMe.js":"2","/Users/Jack/Projects/spotibot/src/hooks/Spotify.js":"3","/Users/Jack/Projects/spotibot/src/components/App.js":"4","/Users/Jack/Projects/spotibot/src/components/GroupPicker.js":"5","/Users/Jack/Projects/spotibot/src/components/PlaylistMaker.js":"6"},{"size":487,"mtime":1612288673741,"results":"7","hashOfConfig":"8"},{"size":2980,"mtime":1612282662967,"results":"9","hashOfConfig":"8"},{"size":2349,"mtime":1612316962902,"results":"10","hashOfConfig":"8"},{"size":4158,"mtime":1612317004015,"results":"11","hashOfConfig":"8"},{"size":3693,"mtime":1612288802862,"results":"12","hashOfConfig":"8"},{"size":907,"mtime":1612294277441,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"9zh2yl",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/Users/Jack/Projects/spotibot/src/index.js",[],["30","31"],"/Users/Jack/Projects/spotibot/src/hooks/GroupMe.js",["32"],"import { useRef, useState, useEffect } from 'react';\nconst GROUPME_CLIENT = 'Nf3qXOSjWPCO7vncXGeu8s5OD0ga2bjzBEdNAw16VuYK4vwt';\nconst GROUPME_URL = 'https://api.groupme.com/v3'\n\nexport const GroupMeLogin = () => {\n    window.location.href = \"https://oauth.groupme.com/oauth/authorize?client_id=\" + GROUPME_CLIENT;\n}\n\nconst getGroups = async (accessToken) => {\n    return fetch(GROUPME_URL + '/groups?token=' + accessToken + '&omit=memberships&per_page=300', {\n        method: 'GET',\n        mode: 'cors'\n    }).then(response => response.json()).then(data => {\n        return data;\n    });\n};\n\nexport const useGroups = (accessToken) => {\n    const [groups, setGroups] = useState(null);\n    const loaded = useRef(false);\n    useEffect(() => {\n        if (!loaded.current) {\n        const getAndSetGroups = async () => {\n                const fetchedGroups = await getGroups(accessToken);\n                setGroups(fetchedGroups);\n                // Commented out so daycards reload when requested.\n                // loaded.current = true;\n            }\n            getAndSetGroups();\n        }\n    }, [accessToken])\n    return groups;\n}\n\nconst getMessages = async (accessToken, groupID, beforeID = null, messages = [], count = 0) => {\n    let idParam = beforeID ? '&before_id=' + beforeID : '';\n    return fetch(GROUPME_URL + '/groups/' + groupID + '/messages?token=' + accessToken + '&limit=100' + idParam, {\n        method: 'GET',\n        mode: 'cors'\n    }).then(response => response.json()).then(data => {\n        if(data.response !== undefined && data.meta.code === 200 && data.response.messages.length === 100) {\n            beforeID = data.response.messages[0].id;\n            console.log(\"one: \" + count);\n            messages.push(data.response.messages);\n            return getMessages(accessToken, groupID, beforeID, messages, count += 1);\n        } else if (data.response !== undefined && data.meta.code === 200 && data.response.messages.length < 100) {\n            messages.push(data.response.messages);\n            console.log(\"two: \" + count);\n            return messages;\n        } else if (data.meta.code !== 200) {\n            console.log(\"three: \" + count);\n            return messages;\n        } else {\n            console.log(\"four: \" + count);\n            return messages;\n        }\n    });\n};\n\nexport const useMessages = (accessToken, groupID) => {\n    const [messages, setMessages] = useState(null);\n    const [loading, setLoading] = useState(true);\n    useEffect(() => {\n        const getAndSetMessages = async () => {\n            try {\n                setLoading(true);\n                const messages = await getMessages(accessToken, groupID);\n                setMessages(messages);\n                setLoading(false);\n            } catch (error) {\n                setLoading(false);\n                console.log(error);\n            }\n        }\n        getAndSetMessages();\n    }, [groupID])\n    return [messages, loading];\n}\n \n\nexport default GroupMeLogin\n","/Users/Jack/Projects/spotibot/src/hooks/Spotify.js",[],"/Users/Jack/Projects/spotibot/src/components/App.js",["33"],"/Users/Jack/Projects/spotibot/src/components/GroupPicker.js",["34"],"import {Button, ListGroup, Spinner, Image, Container, Col, Row, Jumbotron, Dropdown} from 'react-bootstrap';\nimport './GroupPicker.css';\nimport logo from '../images/Spotibot.png';\n\nlet GroupPicker = ({groups, groupIDSender = () => {}, playlistMadeSender = () => {}, loading = false}) => {\n  if(! groups) {\n    return (\n      <div className=\"App\">\n      <Container fluid style={{height: '100vh', display: 'flex'}}>\n        <Col md={4}>\n        </Col>\n        <Col md={4} style={{justifyContent:'center'}}>\n          <Row style={{justifyContent:'center'}}>\n            <div>\n                <Image style={{flex:1, height: '50vh', width: undefined}} src={logo}/>\n            </div>\n          </Row>\n           <Row style={{justifyContent:'center', paddingTop:'15px'}}>\n           <Jumbotron>\n              <h1>Oops!</h1>\n              <p>\n                Looks like there aren't any groups you've joined! Join a group in GroupMe to access this app.\n              </p>\n              &nbsp;\n              <p>\n                <Button variant=\"dark\"> Click here to return to retry! </Button>\n              </p>\n            </Jumbotron>\n           </Row>\n        </Col>\n        <Col md={4}>\n        </Col>\n        </Container>\n      </div>\n    );\n  }\n  groups = groups.response;\n  let groupArr = [];\n  for(let i = 0; i < groups.length; i++) {\n     groupArr.push([groups[i].id, groups[i].name])\n  }\n  groupArr.sort(function(a, b) {\n    if(a[1] < b[1]) { return -1; }\n    if(a[1] > b[1]) { return 1; }\n    return 0;\n  });\n\n  // let handleGroupSelect = (id) => {\n  //   groupIDSender(id);\n  // }\n\n  let GroupList = () => {\n    return (\n      <Dropdown>\n        <Dropdown.Toggle variant=\"dark\" id=\"dropdown-basic\">\n          List Groups\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          {groupArr.map(item => (\n              <div>\n                <Dropdown.Item onSelect={() => {\n                  groupIDSender(item[0]);\n                  playlistMadeSender(false);\n                }} key={item[0]}>{item[1]}</Dropdown.Item>\n              </div>\n            ))}\n        </Dropdown.Menu>\n      </Dropdown>\n    )\n  }\n  if (!loading) {\n    return (\n      <div className=\"App\">\n      <Container fluid style={{height: '100vh', display: 'flex'}}>\n        <Col md={4}>\n        </Col>\n        <Col md={4} style={{justifyContent:'center'}}>\n          <Row style={{justifyContent:'center'}}>\n            <div>\n                <Image style={{flex:1, height: '50vh', width: undefined}} src={logo}/>\n            </div>\n          </Row>\n          <Row style={{justifyContent:'center'}}>\n            <h1>\n              Pick a Group!\n            </h1>\n          </Row>\n            <Row style={{justifyContent:'center', paddingTop:'15px'}}>\n              <GroupList/>\n            </Row>\n        </Col>\n        <Col md={4}>\n        </Col>\n        </Container>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"App\">\n      <Container fluid style={{height: '100vh', display: 'flex'}}>\n        <Col md={4}>\n        </Col>\n        <Col md={4} style={{justifyContent:'center'}}>\n          <Row style={{justifyContent:'center'}}>\n            <div>\n                <Image style={{flex:1, height: '50vh', width: undefined}} src={logo}/>\n            </div>\n          </Row>\n          <Row style={{justifyContent:'center', paddingLeft:'15px'}}>\n            <h1>\n              Loading...\n            </h1>\n          </Row>\n            <Row style={{justifyContent:'center', paddingTop:'15px'}}>\n              <Spinner animation=\"border\" variant=\"dark\" />\n            </Row>\n        </Col>\n        <Col md={4}>\n        </Col>\n        </Container>\n      </div>\n    );\n  }\n  \n}\n  \n\nexport default GroupPicker;\n","/Users/Jack/Projects/spotibot/src/components/PlaylistMaker.js",["35","36","37","38","39"],"import {Button, ListGroup, Spinner, Image, Container, Col, Row, Jumbotron, Dropdown} from 'react-bootstrap';\nimport './PlaylistMaker.css';\nimport {useUID} from '../hooks/Spotify.js'\nimport logo from '../images/Spotibot.png';\n\nlet PlaylistMaker = (UIDsender = () => {}) => {\n  return (\n    <div className=\"App\">\n    <Container fluid style={{height: '100vh', display: 'flex'}}>\n      <Col md={4}>\n      </Col>\n      <Col md={4} style={{justifyContent:'center'}}>\n        <Row style={{justifyContent:'center'}}>\n          <div>\n              <Image style={{flex:1, height: '50vh', width: undefined}} src={logo}/>\n          </div>\n        </Row>\n        <Row style={{justifyContent:'center', paddingTop:'15px'}}>\n          <Button variant=\"dark\"> Click here to get UID! </Button>\n        </Row>\n      </Col>\n      <Col md={4}>\n      </Col>\n      </Container>\n    </div>\n  );\n}\n  \n\nexport default PlaylistMaker;\n",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":76,"column":8,"nodeType":"46","endLine":76,"endColumn":17,"suggestions":"47"},{"ruleId":"48","severity":1,"message":"49","line":36,"column":9,"nodeType":"50","messageId":"51","endLine":36,"endColumn":20},{"ruleId":"48","severity":1,"message":"52","line":1,"column":17,"nodeType":"50","messageId":"51","endLine":1,"endColumn":26},{"ruleId":"48","severity":1,"message":"52","line":1,"column":17,"nodeType":"50","messageId":"51","endLine":1,"endColumn":26},{"ruleId":"48","severity":1,"message":"53","line":1,"column":28,"nodeType":"50","messageId":"51","endLine":1,"endColumn":35},{"ruleId":"48","severity":1,"message":"54","line":1,"column":65,"nodeType":"50","messageId":"51","endLine":1,"endColumn":74},{"ruleId":"48","severity":1,"message":"55","line":1,"column":76,"nodeType":"50","messageId":"51","endLine":1,"endColumn":84},{"ruleId":"48","severity":1,"message":"56","line":3,"column":9,"nodeType":"50","messageId":"51","endLine":3,"endColumn":15},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'accessToken'. Either include it or remove the dependency array.","ArrayExpression",["59"],"no-unused-vars","'spotifyAuth' is assigned a value but never used.","Identifier","unusedVar","'ListGroup' is defined but never used.","'Spinner' is defined but never used.","'Jumbotron' is defined but never used.","'Dropdown' is defined but never used.","'useUID' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [accessToken, groupID]",{"range":"62","text":"63"},[2904,2913],"[accessToken, groupID]"]